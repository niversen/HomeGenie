<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XTenLib</name>
    </assembly>
    <members>
        <member name="T:XTenLib.Drivers.CM15">
            <summary>
            CM15 driver.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM15.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:XTenLib.Drivers.CM15" /> object.
            </summary>
            <remarks>Call <see cref="M:XTenLib.Drivers.CM15.Dispose" /> when you are finished using the <see cref="T:XTenLib.Drivers.CM15" />. The
            <see cref="M:XTenLib.Drivers.CM15.Dispose" /> method leaves the <see cref="T:XTenLib.Drivers.CM15" /> in an unusable state. After
            calling <see cref="M:XTenLib.Drivers.CM15.Dispose" />, you must release all references to the <see cref="T:XTenLib.Drivers.CM15" /> so
            the garbage collector can reclaim the memory that the <see cref="T:XTenLib.Drivers.CM15" /> was occupying.</remarks></member>
        <member name="M:XTenLib.Drivers.CM15.Open">
            <summary>
            Open the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM15.Close">
            <summary>
            Close the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM15.ReadData">
            <summary>
            Reads the data.
            </summary>
            <returns>The data.</returns></member>
        <member name="M:XTenLib.Drivers.CM15.WriteData(System.Byte[])">
            <summary>
            Writes the data.
            </summary>
            <returns><c>true</c>, if data was written, <c>false</c> otherwise.</returns>
            <param name="bytesToSend">Bytes to send.</param></member>
        <member name="T:XTenLib.Drivers.CM11">
            <summary>
            CM11 driver.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM11.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.Drivers.CM11" /> class.
            </summary>
            <param name="port">Serial port path.</param></member>
        <member name="M:XTenLib.Drivers.CM11.Open">
            <summary>
            Open the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM11.Close">
            <summary>
            Close the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.CM11.ReadData">
            <summary>
            Reads the data.
            </summary>
            <returns>The data.</returns></member>
        <member name="M:XTenLib.Drivers.CM11.WriteData(System.Byte[])">
            <summary>
            Writes the data.
            </summary>
            <returns>true</returns>
            <c>false</c>
            <param name="bytesToSend">Bytes to send.</param></member>
        <member name="T:XTenLib.Drivers.XTenInterface">
            <summary>
            X10 driver interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.XTenInterface.Open">
            <summary>
            Open the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.XTenInterface.Close">
            <summary>
            Close the hardware interface.
            </summary></member>
        <member name="M:XTenLib.Drivers.XTenInterface.ReadData">
            <summary>
            Reads the data.
            </summary>
            <returns>The data.</returns></member>
        <member name="M:XTenLib.Drivers.XTenInterface.WriteData(System.Byte[])">
            <summary>
            Writes the data.
            </summary>
            <returns><c>true</c>, if data was written, <c>false</c> otherwise.</returns>
            <param name="bytesToSend">Bytes to send.</param></member>
        <member name="T:XTenLib.XTenManager">
            <summary>
            X10 Home Automation library for .NET / Mono. It supports CM11 (serial) and CM15 (USB) hardware.
            </summary></member>
        <member name="T:XTenLib.XTenManager.ConnectionStatusChangedEventHandler">
            <summary>
            Connected state changed event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.ConnectionStatusChanged">
            <summary>
            Occurs when connected state changed.
            </summary></member>
        <member name="E:XTenLib.XTenManager.ModuleChanged">
            <summary>
            Occurs when an X10 module changed.
            </summary></member>
        <member name="T:XTenLib.XTenManager.PlcAddressReceivedEventHandler">
            <summary>
            Plc address received event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.PlcAddressReceived">
            <summary>
            Occurs when plc address received.
            </summary></member>
        <member name="T:XTenLib.XTenManager.PlcFunctionReceivedEventHandler">
            <summary>
            Plc function received event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.PlcFunctionReceived">
            <summary>
            Occurs when plc command received.
            </summary></member>
        <member name="T:XTenLib.XTenManager.RfDataReceivedEventHandler">
            <summary>
            RF data received event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.RfDataReceived">
            <summary>
            Occurs when RF data is received.
            </summary></member>
        <member name="T:XTenLib.XTenManager.X10CommandReceivedEventHandler">
            <summary>
            X10 command received event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.RfCommandReceived">
            <summary>
            Occurs when x10 command received.
            </summary></member>
        <member name="T:XTenLib.XTenManager.X10SecurityReceivedEventHandler">
            <summary>
            X10 security data received event.
            </summary></member>
        <member name="E:XTenLib.XTenManager.RfSecurityReceived">
            <summary>
            Occurs when x10 security data is received.
            </summary></member>
        <member name="M:XTenLib.XTenManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.XTenManager" /> class.
            </summary></member>
        <member name="M:XTenLib.XTenManager.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:XTenLib.XTenManager" /> is reclaimed by garbage collection.
            </summary></member>
        <member name="M:XTenLib.XTenManager.Connect">
            <summary>
            Connect to the X10 hardware.
            </summary></member>
        <member name="M:XTenLib.XTenManager.Disconnect">
            <summary>
            Connect from the X10 hardware.
            </summary></member>
        <member name="P:XTenLib.XTenManager.IsConnected">
            <summary>
            Gets a value indicating whether the X10 hardware is connected.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value></member>
        <member name="P:XTenLib.XTenManager.PortName">
            <summary>
            Gets or sets the name of the port. This can be "USB" when using CM15 hardware or the
            serial port address if using CM11 (eg. "COM7" on Windows or "/dev/ttyUSB1" on Linux).
            </summary>
            <value>The name of the port.</value></member>
        <member name="P:XTenLib.XTenManager.HouseCode">
            <summary>
            Gets or sets the house codes. This string is a comma separated list of house codes (eg. "A,B,O")
            </summary>
            <value>The house code.</value></member>
        <member name="P:XTenLib.XTenManager.Modules">
            <summary>
            Gets the list of all X10 modules or a specific module (eg. var modA5 = x10lib.Modules["A5"]).
            </summary>
            <value>The modules.</value></member>
        <member name="P:XTenLib.XTenManager.AddressedModules">
            <summary>
            Gets the addressed modules.
            </summary>
            <value>The addressed modules list.</value></member>
        <member name="M:XTenLib.XTenManager.Dim(XTenLib.X10HouseCode,XTenLib.X10UnitCode,System.Int32)">
            <summary>
            Dim the specified module (housecode, unitcode) by the specified percentage.
            </summary>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param>
            <param name="percentage">Percentage.</param></member>
        <member name="M:XTenLib.XTenManager.Bright(XTenLib.X10HouseCode,XTenLib.X10UnitCode,System.Int32)">
            <summary>
            Brighten the specified module (housecode, unitcode) by the specified percentage.
            </summary>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param>
            <param name="percentage">Percentage.</param></member>
        <member name="M:XTenLib.XTenManager.UnitOn(XTenLib.X10HouseCode,XTenLib.X10UnitCode)">
            <summary>
            Turn on the specified module (housecode, unitcode).
            </summary>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param></member>
        <member name="M:XTenLib.XTenManager.UnitOff(XTenLib.X10HouseCode,XTenLib.X10UnitCode)">
            <summary>
            Turn off the specified module (housecode, unitcode).
            </summary>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param></member>
        <member name="M:XTenLib.XTenManager.AllLightsOn(XTenLib.X10HouseCode)">
            <summary>
            Turn on all the light modules with the given housecode.
            </summary>
            <param name="houseCode">Housecode.</param></member>
        <member name="M:XTenLib.XTenManager.AllUnitsOff(XTenLib.X10HouseCode)">
            <summary>
            Turn off all the light modules with the given housecode.
            </summary>
            <param name="houseCode">Housecode.</param></member>
        <member name="M:XTenLib.XTenManager.StatusRequest(XTenLib.X10HouseCode,XTenLib.X10UnitCode)">
            <summary>
            Request module status.
            </summary>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param></member>
        <member name="M:XTenLib.XTenManager.OnConnectionStatusChanged(XTenLib.ConnectionStatusChangedEventArgs)">
            <summary>
            Raises the connected state changed event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.XTenManager.OnPlcAddressReceived(XTenLib.PlcAddressReceivedEventArgs)">
            <summary>
            Raises the plc address received event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.XTenManager.OnPlcFunctionReceived(XTenLib.PlcFunctionReceivedEventArgs)">
            <summary>
            Raises the plc function received event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.XTenManager.OnRfDataReceived(XTenLib.RfDataReceivedEventArgs)">
            <summary>
            Raises the rf data received event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.XTenManager.OnRfCommandReceived(XTenLib.RfCommandReceivedEventArgs)">
            <summary>
            Raises the RF command received event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.XTenManager.OnRfSecurityReceived(XTenLib.RfSecurityReceivedEventArgs)">
            <summary>
            Raises the RF security received event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:XTenLib.Utility.GetDimValue(System.Int32)">
            <summary>
            </summary>
            <param name="percentage"></param>
            <returns></returns></member>
        <member name="M:XTenLib.Utility.GetPercentageValue(System.Byte)">
            <summary>
            returns a value between 0.0 and 1.0 representing the percentage of dim
            </summary>
            <param name="dimvalue"></param>
            <returns></returns></member>
        <member name="P:XTenLib.X10Module.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value></member>
        <member name="P:XTenLib.X10Module.Code">
            <summary>
            Gets the House+Unit code of this module.
            </summary>
            <value>The code.</value></member>
        <member name="P:XTenLib.X10Module.HouseCode">
            <summary>
            Gets the house code.
            </summary>
            <value>The house code.</value></member>
        <member name="P:XTenLib.X10Module.UnitCode">
            <summary>
            Gets the unit code.
            </summary>
            <value>The unit code.</value></member>
        <member name="M:XTenLib.X10Module.On">
            <summary>
            Turn On this module.
            </summary></member>
        <member name="M:XTenLib.X10Module.Off">
            <summary>
            Turn Off this module.
            </summary></member>
        <member name="M:XTenLib.X10Module.Dim(System.Int32)">
            <summary>
            Dim the module by the specified percentage.
            </summary>
            <param name="percentage">Percentage.</param></member>
        <member name="M:XTenLib.X10Module.Bright(System.Int32)">
            <summary>
            Brighten the module by the specified percentage.
            </summary>
            <param name="percentage">Percentage.</param></member>
        <member name="M:XTenLib.X10Module.GetStatus">
            <summary>
            Request the status of the module.
            </summary></member>
        <member name="P:XTenLib.X10Module.IsOn">
            <summary>
            Gets a value indicating whether this module is on.
            </summary>
            <value><c>true</c> if this module is on; otherwise, <c>false</c>.</value></member>
        <member name="P:XTenLib.X10Module.IsOff">
            <summary>
            Gets a value indicating whether this module is off.
            </summary>
            <value><c>true</c> if this module is off; otherwise, <c>false</c>.</value></member>
        <member name="P:XTenLib.X10Module.Level">
            <summary>
            Gets the dimmer level. This value ranges from 0.0 (0%) to 1.0 (100%).
            </summary></member>
        <member name="T:XTenLib.ConnectionStatusChangedEventArgs">
            <summary>
            Connected state changed event arguments.
            </summary></member>
        <member name="F:XTenLib.ConnectionStatusChangedEventArgs.Connected">
            <summary>
            The connected state.
            </summary></member>
        <member name="M:XTenLib.ConnectionStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.ConnectionStatusChangedEventArgs" /> class.
            </summary>
            <param name="state">State of the connection (true = connected, false = not connected).</param></member>
        <member name="T:XTenLib.PlcAddressReceivedEventArgs">
            <summary>
            Plc address received event arguments.
            </summary></member>
        <member name="F:XTenLib.PlcAddressReceivedEventArgs.HouseCode">
            <summary>
            The house code.
            </summary></member>
        <member name="F:XTenLib.PlcAddressReceivedEventArgs.UnitCode">
            <summary>
            The unit code.
            </summary></member>
        <member name="M:XTenLib.PlcAddressReceivedEventArgs.#ctor(XTenLib.X10HouseCode,XTenLib.X10UnitCode)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.PlcAddressReceivedEventArgs" /> class.
            </summary>
            <param name="hc">Hc.</param>
            <param name="uc">Uc.</param></member>
        <member name="T:XTenLib.PlcFunctionReceivedEventArgs">
            <summary>
            Plc function received event arguments.
            </summary></member>
        <member name="F:XTenLib.PlcFunctionReceivedEventArgs.Command">
            <summary>
            The command.
            </summary></member>
        <member name="F:XTenLib.PlcFunctionReceivedEventArgs.HouseCode">
            <summary>
            The house code.
            </summary></member>
        <member name="M:XTenLib.PlcFunctionReceivedEventArgs.#ctor(XTenLib.X10Command,XTenLib.X10HouseCode)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.PlcFunctionReceivedEventArgs" /> class.
            </summary>
            <param name="cmd">Cmd.</param>
            <param name="hc">Hc.</param></member>
        <member name="T:XTenLib.RfDataReceivedEventArgs">
            <summary>
            RF data received event arguments.
            </summary></member>
        <member name="F:XTenLib.RfDataReceivedEventArgs.Data">
            <summary>
            The raw data.
            </summary></member>
        <member name="M:XTenLib.RfDataReceivedEventArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.RfDataReceivedEventArgs" /> class.
            </summary>
            <param name="data">Data.</param></member>
        <member name="T:XTenLib.RfCommandReceivedEventArgs">
            <summary>
            RF command received event arguments.
            </summary></member>
        <member name="F:XTenLib.RfCommandReceivedEventArgs.Command">
            <summary>
            The command.
            </summary></member>
        <member name="F:XTenLib.RfCommandReceivedEventArgs.HouseCode">
            <summary>
            The house code.
            </summary></member>
        <member name="F:XTenLib.RfCommandReceivedEventArgs.UnitCode">
            <summary>
            The unit code.
            </summary></member>
        <member name="M:XTenLib.RfCommandReceivedEventArgs.#ctor(XTenLib.X10RfFunction,XTenLib.X10HouseCode,XTenLib.X10UnitCode)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.RfCommandReceivedEventArgs" /> class.
            </summary>
            <param name="function">Function.</param>
            <param name="housecode">Housecode.</param>
            <param name="unitcode">Unitcode.</param></member>
        <member name="T:XTenLib.RfSecurityReceivedEventArgs">
            <summary>
            RF security received event arguments.
            </summary></member>
        <member name="F:XTenLib.RfSecurityReceivedEventArgs.Event">
            <summary>
            The event.
            </summary></member>
        <member name="F:XTenLib.RfSecurityReceivedEventArgs.Address">
            <summary>
            The address.
            </summary></member>
        <member name="M:XTenLib.RfSecurityReceivedEventArgs.#ctor(XTenLib.X10RfSecurityEvent,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:XTenLib.RfSecurityReceivedEventArgs" /> class.
            </summary>
            <param name="evt">Evt.</param>
            <param name="addr">Address.</param></member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nmqtt</name>
    </assembly>
    <members>
        <member name="T:Nmqtt.ClientIdentifierException">
            <summary>
            Exception thrown when a client identifier included in a message is too long.
            </summary>
        </member>
        <member name="P:Nmqtt.ClientIdentifierException.ClientIdentifier">
            <summary>
            The client identifier that was incorrect.
            </summary>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="clientIdentifier">The client idenfitier that caused the problem.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.ClientIdentifierException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Nmqtt.ConnectionDroppedEventArgs">
            <summary>
            Event Arguments that represent a connection dropped reason.
            </summary>
        </member>
        <member name="P:Nmqtt.ConnectionDroppedEventArgs.Exception">
            <summary>
            The exception that caused the connection to drop.
            </summary>
            <value>The </value>
        </member>
        <member name="M:Nmqtt.ConnectionDroppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ConnectionDroppedEventArgs" /> class.
            </summary>
            <param name="exception">The Exception that describes the reason for disconnection.</param>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.Close">
            <summary>
            Closes a connection.
            </summary>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.Connect(System.String,System.Int32,Nmqtt.MqttConnectMessage)">
            <summary>
            Connects to a message broker
            </summary>
            <param name="server">The broker servr to connect to</param>
            <param name="port">The port to connect to.</param>
            <param name="message">The connect message to use to initiate the connection.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.RegisterForMessage(Nmqtt.MqttMessageType,System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            Register the specified callback to receive messages of a specific type.
            </summary>
            <param name="msgType">The type of message that the callback should be sent.</param>
            <param name="msgProcessorCallback">The callback function that will accept the message type.</param>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.SendMessage(Nmqtt.MqttMessage)">
            <summary>
            Sends a message to a message broker.
            </summary>
            <param name="message">The message to send to the broker.</param>
        </member>
        <member name="P:Nmqtt.IMqttConnectionHandler.State">
            <summary>
            Gets the current connection state.
            </summary>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.UnRegisterForMessage(Nmqtt.MqttMessageType,System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            Unregisters the specified callbacks so it not longer receives messages of the specified type.
            </summary>
            <param name="msgType">The message type the callback currently receives.</param>
            <param name="msgProcessorCallback">The callback to unregister.</param>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.RegisterForAllSentMessages(System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            Registers a callback to be executed whenever a message is sent by the connection handler.
            </summary>
            <param name="sentMsgCallback">The callback to execute when any message is sent.</param>
        </member>
        <member name="M:Nmqtt.IMqttConnectionHandler.UnRegisterForAllSentMessages(System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            UnRegisters a callback that is registerd to be executed whenever a message is sent by the connection handler.
            </summary>
            <param name="sentMsgCallback">The callback to execute when any message is sent.</param>
        </member>
        <member name="T:Nmqtt.SynchronousMqttConnectionHandler">
            <summary>
            Connection handler that performs connections and disconnections to the hostname in a synchronous manner.
            </summary>
        </member>
        <member name="M:Nmqtt.SynchronousMqttConnectionHandler.InternalConnect(System.String,System.Int32,Nmqtt.MqttConnectMessage)">
            <summary>
            Synchronously connect to the specific Mqtt Connection.
            </summary>
            <param name="hostname">The hostname hostnameto connect to.</param>
            <param name="port">The port on the host to connect to.</param>
            <param name="connectMessage">The connection message that should be used to initiate the connection.</param>
        </member>
        <member name="M:Nmqtt.SynchronousMqttConnectionHandler.PerformConnectionDisconnect">
            <summary>
            Disconnects the underlying connection object.
            </summary>
        </member>
        <member name="M:Nmqtt.SynchronousMqttConnectionHandler.ConnectAckProcessor(Nmqtt.MqttMessage)">
            <summary>
            Processes the connect acknowledgement message.
            </summary>
            <param name="msg">The connect acknowledgement message.</param>
        </member>
        <member name="T:Nmqtt.ConnectionState">
            <summary>
            Enumeration that indicates various client connection states
            </summary>
        </member>
        <member name="F:Nmqtt.ConnectionState.Disconnecting">
            <summary>
            The MQTT Connection is in the process of disconnecting from the broker.
            </summary>
        </member>
        <member name="F:Nmqtt.ConnectionState.Disconnected">
            <summary>
            The MQTT Connection is not currently connected to any broker.
            </summary>
        </member>
        <member name="F:Nmqtt.ConnectionState.Connecting">
            <summary>
            The MQTT Connection is in the process of connecting to the broker.
            </summary>
        </member>
        <member name="F:Nmqtt.ConnectionState.Connected">
            <summary>
            The MQTT Connection is currently connected to the broker.
            </summary>
        </member>
        <member name="F:Nmqtt.ConnectionState.Faulted">
            <summary>
            The MQTT Connection is faulted and no longer communicating with the broker.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttConnectionHandler">
            <summary>
            Abstract base that provides shared connection functionality to connection handler impementations.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnectionHandler.messageProcessorRegistry">
            <summary>
            Registry of message processors
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnectionHandler.sentMessageCallbacks">
            <summary>
            Registry of sent message callbacks
            </summary>
        </member>
        <member name="P:Nmqtt.MqttConnectionHandler.ConnectionState">
            <summary>
            Gets the current state of the connection handler.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectionHandler" /> class.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttConnectionHandler.State">
            <summary>
            Gets the current conneciton state of the Mqtt Client.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.Connect(System.String,System.Int32,Nmqtt.MqttConnectMessage)">
            <summary>
            Connect to the specific Mqtt Connection.
            </summary>
            <param name="server">The hostname to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="message">The connect message to use as part of the connection process.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.InternalConnect(System.String,System.Int32,Nmqtt.MqttConnectMessage)">
            <summary>
            Connect to the specific Mqtt Connection.
            </summary>
            <param name="hostname">The hostname to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="message">The connect message to use as part of the connection process.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.SendMessage(Nmqtt.MqttMessage)">
            <summary>
            Sends a message to the broker through the current connection.
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.Disconnect">
            <summary>
            Runs the disconnection process to stop communicating with a message broker.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.Close">
            <summary>
            Closes the connection to the Mqtt message broker.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.RegisterForMessage(Nmqtt.MqttMessageType,System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            Registers for the receipt of messages when they arrive.
            </summary>
            <param name="msgType">The message type to register for.</param>
            <param name="msgProcessorCallback">The callback function that will be executed when the message arrives.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.UnRegisterForMessage(Nmqtt.MqttMessageType,System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            UnRegisters for the receipt of messages when they arrive.
            </summary>
            <param name="msgType">The message type to register for.</param>
            <param name="msgProcessorCallback">The MSG processor callback.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.RegisterForAllSentMessages(System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            Registers a callback to be called whenever a message is sent.
            </summary>
            <param name="sentMsgCallback">The sent MSG callback.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.UnRegisterForAllSentMessages(System.Func{Nmqtt.MqttMessage,System.Boolean})">
            <summary>
            UnRegisters a callback that is called whenever a message is sent.
            </summary>
            <param name="sentMsgCallback">The sent MSG callback.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.connection_MessageDataAvailable(System.Object,Nmqtt.DataAvailableEventArgs)">
            <summary>
            Handles the DataAvailable event of the connection control for handling non connection messages
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            The <see cref="T:Nmqtt.DataAvailableEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnectionHandler.Dispose">
            <summary>
            Cleans up the underlying raw connection to the hostname.
            </summary>
        </member>
        <member name="T:Nmqtt.ConnectionException">
            <summary>
            Exception thrown when a client identifier included in a message is too long.
            </summary>
        </member>
        <member name="P:Nmqtt.ConnectionException.ConnectionState">
            <summary>
            The connection state that caused the exception.
            </summary>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(Nmqtt.ConnectionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ConnectionException" /> class.
            </summary>
            <param name="connectionState">State of the connection.</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(Nmqtt.ConnectionState,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ConnectionException" /> class.
            </summary>
            <param name="connectionState">State of the connection.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ConnectionException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ConnectionException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The exception that caused the connection problem</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(System.String,Nmqtt.ConnectionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="connectionState">The current connection state.</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(System.String,Nmqtt.ConnectionState,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="connectionState">The current connection state.</param>
        </member>
        <member name="M:Nmqtt.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.ConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Nmqtt.SubscriptionTopic">
            <summary>
            Implementation of an MQTT rawTopic and all the validation that goes on inside it.
            </summary>
        </member>
        <member name="M:Nmqtt.SubscriptionTopic.#ctor(System.String)">
            <summary>
            Creates a new instance of a rawTopic from a topic string.
            </summary>
            <param name="RawTopic">The rawTopic to represent.</param>
        </member>
        <member name="M:Nmqtt.SubscriptionTopic.ValidateFragments(Nmqtt.Topic)">
            <summary>
            Validates all unqiue fragments in the topic match the MQTT spec requirements.
            </summary>
        </member>
        <member name="M:Nmqtt.SubscriptionTopic.ValidateMultiWildcard(Nmqtt.Topic)">
            <summary>
            Validates the placement of the multi-wildcard character in subscription topics.
            </summary>
            <param name="topicInstance">The instance to check.</param>
        </member>
        <member name="M:Nmqtt.SubscriptionTopic.Matches(Nmqtt.PublicationTopic)">
            <summary>
            Checks if the rawTopic matches the supplied rawTopic using the MQTT rawTopic matching rules.
            </summary>
            <param name="matcheeTopic">The rawTopic to match.</param>
            <returns>True if the rawTopic matches based on the MQTT rawTopic matching rules, otherwise false.</returns>
        </member>
        <member name="T:Nmqtt.InvalidTopicException">
            <summary>
            Exception that is thrown when the payload of a message is not the correct size.
            </summary>
        </member>
        <member name="P:Nmqtt.InvalidTopicException.Topic">
            <summary>
            The topic that is invalid
            </summary>
        </member>
        <member name="M:Nmqtt.InvalidTopicException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidTopicException" /> class.
            </summary>
            <param name="message">The reason the topic is invalid.</param>
            <param name="topic">The topic that was invalid.</param>
        </member>
        <member name="M:Nmqtt.InvalidTopicException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidTopicException" /> class.
            </summary>
            <param name="message">The reason the topic is invalid.</param>
            <param name="topic">The topic that was invalid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.InvalidTopicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.InvalidTopicException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Nmqtt.Diagnostics.MessageLogger">
            <summary>
            Implements message logging by observing the messages received and the messages sent.
            </summary>
        </member>
        <member name="M:Nmqtt.Diagnostics.MessageLogger.#ctor(Nmqtt.MqttConnectionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.Diagnostics.MessageLogger" /> class.
            </summary>
            <param name="connectionHandler">The connection handler.</param>
        </member>
        <member name="M:Nmqtt.Diagnostics.MessageLogger.MessageSentCallback(Nmqtt.MqttMessage)">
            <summary>
            Called whenever a message is sent from the client to the broker.
            </summary>
            <param name="msg">The message that was sent.</param>
            <returns>true; always.</returns>
        </member>
        <member name="M:Nmqtt.Diagnostics.MessageLogger.MessageLoggerCallback(Nmqtt.MqttMessage)">
            <summary>
            Logs details of received messages.
            </summary>
            <param name="msg">The message to log.</param>
            <returns>true, always.</returns>
        </member>
        <member name="M:Nmqtt.Diagnostics.MessageLogger.LogMessage(Nmqtt.MqttMessage,System.Boolean)">
            <summary>
            Logs a message to the message log
            </summary>
            <param name="msg">The message to log.</param>
            <param name="inbound">Set to true if the message is inbound to the client.</param>
        </member>
        <member name="M:Nmqtt.Diagnostics.MessageLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nmqtt.ExtensionMethods.CollectionExtensions">
            <summary>
            Helper methods to provide functionality on Collection[T].
            </summary>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.CollectionExtensions.AddRange(System.Collections.ObjectModel.Collection{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Provides AddRange functionality to Collection[T]
            </summary>
            <param name="collection">The collection to add a range of values to.</param>
            <param name="range">The range of valus to add to the collection.</param>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides AddRange functionality to Collection[T]
            </summary>
            <param name="collection">The collection to add a range of values to.</param>
            <param name="range">The range of valus to add to the collection.</param>
        </member>
        <member name="T:Nmqtt.MqttConnectionKeepAlive">
            <summary>
            Implements keepalive functionality on the Mqtt Connection, ensuring that the connection
            remains active according to the keepalive seconds setting.
            </summary>
            <remarks>
            This class implements the keepalive by sending an MqttPingRequest to the broker if a message
            has not been send or received within the keepalive period.
            </remarks>
        </member>
        <member name="F:Nmqtt.MqttConnectionKeepAlive.pingTimer">
            <summary>
            The threading timer that manages the ping callbacks.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnectionKeepAlive.shutdownPadlock">
            <summary>
            Used to synchronise shutdown and poing operations.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnectionKeepAlive.disposed">
            <summary>
            Used to indicate that the class has been disposed and is awaiting GC.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.#ctor(Nmqtt.IMqttConnectionHandler,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectionKeepAlive" /> class.
            </summary>
            <param name="connectionHandler">The connection to keep alive.</param>
            <param name="keepAliveSeconds">The keep alive duration in seconds.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.MessageSent(Nmqtt.MqttMessage)">
            <summary>
            Handles the MessageSent event of the connectionHandler control.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.PingRequired(System.Object)">
            <summary>
            Pings the message broker if there has been no activity for the specified amount of idle time.
            </summary>
            <param name="state">
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.PingRequestReceived(Nmqtt.MqttMessage)">
            <summary>
            Signal to the keepalive that a ping request has been received from the message broker.
            </summary>
            <remarks>
            The effect of calling this method on the keepalive handler is the transmission of a ping response
            message to the message broker on the current connection.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.PingResponseReceived(Nmqtt.MqttMessage)">
            <summary>
            Processed ping response messages received from a message broker.
            </summary>
            <param name="pingMsg">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectionKeepAlive.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nmqtt.IPayloadConverter`1">
            <summary>
            Interface that defines the methods and properties that must be provided by classes
            that interpret and convert inbound and outbound published message data.
            </summary>
            <remarks>
                <para>
            Types that implement this interface should be aware that for the purposes of converting
            data from published messages (byte array to object model) that the MqttSubscriptionsManager
            creates a single instance of the data converter and uses it for all messages that are
            received.
            </para>
                <para>
            The same is true for the publishing of data to a broker. The PublishingManager will
            also cache instances of the converters until the MqttClient is disposed.
            </para>
                <para>
            This means, in both cases you can store state in the data converters if you wish, and
            that state will persist between messages received or published, but only a default empty
            constructor is supported.
            </para>
            </remarks>
        </member>
        <member name="M:Nmqtt.IPayloadConverter`1.ConvertFromBytes(System.Byte[])">
            <summary>
            Converts received data from a raw byte array to an object graph.
            </summary>
            <param name="messageData">The received data as an array of bytes.</param>
            <returns>The data processed and turned into the specified type.</returns>
        </member>
        <member name="M:Nmqtt.IPayloadConverter`1.ConvertToBytes(`0)">
            <summary>
            Converts sent data from an object graph to a byte array.
            </summary>
            <param name="data">The data to convert to the byte array.</param>
            <returns>A byte array representation of the data.</returns>
        </member>
        <member name="T:Nmqtt.IPublishingManager">
            <summary>
            Interface that defines how the punlishing manager publishes messages to the broker and
            how it passed on messages that are received from the broker.
            </summary>
        </member>
        <member name="M:Nmqtt.IPublishingManager.Publish``2(Nmqtt.PublicationTopic,Nmqtt.MqttQos,``0)">
            <summary>
            Publish a message to the broker on the specified topic.
            </summary>
            <param name="topic">The topic to send the message to.</param>
            <param name="qualityOfService">The QOS to use when publishing the message.</param>
            <param name="data">The message to send.</param>
            <returns>The message identifier assigned to the message.</returns>
        </member>
        <member name="E:Nmqtt.IPublishingManager.MessageReceived">
            <summary>
            Event raised when a message has been successfully received and the
            relevant QOS handshake has been completed.
            </summary>
        </member>
        <member name="F:Nmqtt.MessageIdentifierDispenser.idPadlock">
            <summary>
            Used to synchronise access
            </summary>
        </member>
        <member name="M:Nmqtt.MessageIdentifierDispenser.GetNextMessageIdentifier(System.String)">
            <summary>
            Gets the next message identifier for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Nmqtt.MqttConnectAckMessage">
            <summary>
            Message that indicates a connection acknowledgement.
            </summary>
            <summary>
            Message that indicates a connection acknowledgement.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.WithReturnCode(Nmqtt.MqttConnectReturnCode)">
            <summary>
            Sets the return code of the Variable Header.
            </summary>
            <param name="returnCode">The return code to set.</param>
            <returns>The new MqttConnectAckMessage with the return code set.</returns>
        </member>
        <member name="P:Nmqtt.MqttConnectAckMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectAckMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectAckMessage" /> class.
            </summary>
            <param name="header">The header.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes a message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishAckMessage">
            <summary>
            Implementation of an MQTT Publish Acknowledgement Message, used to ACK a publish message that has it's QOS set to AtLeast or Exactly Once.
            </summary>
            <summary>
            Implementation of an MQTT Publish Acknowledgement Message, used to ACK a publish message that has it's QOS set to AtLeast or Exactly Once.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishAckMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier of the MqttMessage.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="P:Nmqtt.MqttPublishAckMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttPublishAckMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishAckMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishAckMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishCompleteMessage">
            <summary>
            Implementation of an MQTT Publish Complete Message.
            </summary>
            <summary>
            Implementation of an MQTT Publish Complete Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the publishComplete message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the MqttPublishCompleteMessage.</returns>
        </member>
        <member name="P:Nmqtt.MqttPublishCompleteMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishCompleteMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishCompleteMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishReceivedMessage">
            <summary>
            Implementation of an MQTT Publish Received Message.
            </summary>
            <summary>
            Implementation of an MQTT Publish Received Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the publishReceived message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the MqttPublishReceivedMessage.</returns>
        </member>
        <member name="P:Nmqtt.MqttPublishReceivedMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReceivedMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReceivedMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishReleaseMessage">
            <summary>
            Implementation of an MQTT Publish Release Message.
            </summary>
            <summary>
            Implementation of an MQTT Publish Release Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the publishrelease message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the MqttPublishReleaseMessage.</returns>
        </member>
        <member name="P:Nmqtt.MqttPublishReleaseMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReleaseMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReleaseMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishMessage">
            <summary>
            Implementation of an MQTT Publish Message, used for publishing telemetry data along a live MQTT stream.
            </summary>
            <summary>
            Implementation of an MQTT Publish Message, used for publishing telemetry data along a live MQTT stream.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.ToTopic(System.String)">
            <summary>
            Sets the topic to publish data to.
            </summary>
            <param name="topicName">The name of the topic to publish.</param>
            <returns>The updated instance of the message with the topic name set.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.PublishData(System.Byte[])">
            <summary>
            Appends data to publish to the end of the current message payload.
            </summary>
            <param name="data">The data to append to the end of the published data</param>
            <returns>The updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier of the message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.WithQos(Nmqtt.MqttQos)">
            <summary>
            Sets the Qos of the published message.
            </summary>
            <param name="qos">The qos to set.</param>
            <returns>The updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.ClearPublishData">
            <summary>
            Removes the current published data.
            </summary>
            <returns>The updated instance of the message with published data cleared</returns>
        </member>
        <member name="P:Nmqtt.MqttPublishMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="P:Nmqtt.MqttPublishMessage.Payload">
            <summary>
            Gets or sets the payload of the Mqtt Message.
            </summary>
            <value>The payload of the Mqtt Message.</value>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.WriteTo(System.IO.Stream)">
            <summary>
            ss the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the subscribe acknowledgement message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.AddQosGrant(Nmqtt.MqttQos)">
            <summary>
            Adds a subscription grant to the message.
            </summary>
            <param name="qosGranted">The granted Qos to add.</param>
            <returns>The updated instance of the message.</returns>
        </member>
        <member name="P:Nmqtt.MqttSubscribeAckMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="P:Nmqtt.MqttSubscribeAckMessage.Payload">
            <summary>
            Gets or sets the payload of the Mqtt Message.
            </summary>
            <value>The payload of the Mqtt Message.</value>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.ToTopic(System.String)">
            <summary>
            Adds a new subscription topic with the AtMostOnce Qos Level. If you want to change the
            Qos level follow this call with a call to AtTopic(MqttQos)
            </summary>
            <param name="topic">The topic to subscribe to.</param>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.AtQos(Nmqtt.MqttQos)">
            <summary>
            Sets the Qos level of the last topic added to the subscription list via a call to ToTopic(string)
            </summary>
            <param name="qos">The Qos to set the last topic subscription to.</param>
            <returns>An update instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the subscribe message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.ExpectAcknowledgement">
            <summary>
            Sets the message up to request acknowledgement from the broker for each topic subscription.
            </summary>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.IsDuplicate">
            <summary>
            Sets the duplicate flag for the message to indicate its a duplicate of a previous message type
            with the same message identifier.
            </summary>
            <returns>An updated version of the message.</returns>
        </member>
        <member name="P:Nmqtt.MqttSubscribeMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="P:Nmqtt.MqttSubscribeMessage.Payload">
            <summary>
            Gets or sets the payload of the Mqtt Message.
            </summary>
            <value>The payload of the Mqtt Message.</value>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttUnsubscribeAckMessage">
            <summary>
            Implementation of an MQTT Unsubscribe ACK Message, used to acknowledge that an unsubscribe message has been processed.
            </summary>
            <summary>
            Implementation of an MQTT Unsubscribe ACK Message, used to acknowledge that an unsubscribe message has been processed.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the unsubscribe message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the MqttSubscribeAckMessage.</returns>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeAckMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.WithMessageIdentifier(System.Int16)">
            <summary>
            Sets the message identifier on the unsubscribe message.
            </summary>
            <param name="messageIdentifier">The ID of the message.</param>
            <returns>The updated instance of the MqttSubscribeAckMessage.</returns>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.FromTopic(System.String)">
            <summary>
            Adds a topic to the list of topics to unsubscribe from.
            </summary>
            <param name="topic">The topic to unsubscribe.</param>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.ExpectAcknowledgement">
            <summary>
            Sets the message up to request acknowledgement from the broker for each topic un-subscription.
            </summary>
            <returns>An updated instance of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.IsDuplicate">
            <summary>
            Sets the duplicate flag for the message to indicate its a duplicate of a previous message type
            with the same message identifier.
            </summary>
            <returns>An updated version of the message.</returns>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeMessage.Payload">
            <summary>
            Gets or sets the payload of the Mqtt Message.
            </summary>
            <value>The payload of the Mqtt Message.</value>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribeMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribeMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttReceivedMessage`1">
            <summary>
            Represents a MQTT message that has been received from a broker.
            </summary>
            <typeparam name="T">The type of data the payload contains.</typeparam>
        </member>
        <member name="P:Nmqtt.MqttReceivedMessage`1.Topic">
            <summary>
            The topic the message was received on.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttReceivedMessage`1.Payload">
            <summary>
            The payload of the mesage received.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttReceivedMessage`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of an MqttReceivedMessage class.
            </summary>
            <param name="topic">The topic the message was received on</param>
            <param name="payload">The payload that was received.</param>
        </member>
        <member name="T:Nmqtt.InvalidMessageEventArgs">
            <summary>
            Event arguments that represent the data present within an invalid message.
            </summary>
        </member>
        <member name="P:Nmqtt.InvalidMessageEventArgs.Exception">
            <summary>
            Gets or sets the Exception that describes the invalid message problem.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="M:Nmqtt.InvalidMessageEventArgs.#ctor(Nmqtt.InvalidMessageException)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidMessageEventArgs" /> class.
            </summary>
            <param name="exception">The Exception that describes the message problem.</param>
        </member>
        <member name="T:Nmqtt.InvalidMessageException">
            <summary>
            Exception thrown when processing a Message that is invalid in some way.
            </summary>
        </member>
        <member name="M:Nmqtt.InvalidMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidMessageException" /> class.
            </summary>
            ss
            <param name="message">The message.</param></member>
        <member name="M:Nmqtt.InvalidMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidMessageException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.InvalidMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.InvalidMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Nmqtt.DataAvailableEventArgs">
            <summary>
            Event arguments for the Data Available event fired by the MqttConnection class.
            </summary>
        </member>
        <member name="P:Nmqtt.DataAvailableEventArgs.MessageData">
            <summary>
            Gets or sets the data stream that contains the data to read from.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="M:Nmqtt.DataAvailableEventArgs.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.DataAvailableEventArgs" /> class.
            </summary>
            <param name="messageData">A collection of bytes containing the message data.</param>
        </member>
        <member name="T:Nmqtt.Encoding.MqttEncoding">
            <summary>
            Encoding implementation that can encode and decode strings in the MQTT string format.
            </summary>
            <remarks>
            The MQTT string format is simply a pascal string with ANSI character encoding. The first 2 bytes define
            the length of the string, and they are followed by the string itself.
            </remarks>
        </member>
        <member name="M:Nmqtt.Encoding.MqttEncoding.GetBytes(System.String)">
            <summary>
            When overridden in a derived class, encodes all the characters in the specified <see cref="T:System.String" /> into a sequence of bytes.
            </summary>
            <param name="s">
            </param>
            <returns>
            A byte array containing the results of encoding the specified set of characters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="s" /> is null.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:Nmqtt.Encoding.MqttEncoding.GetString(System.Byte[])">
            <summary>
            When overridden in a derived class, decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>
            A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bytes" /> is null.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:Nmqtt.Encoding.MqttEncoding.GetCharCount(System.Byte[])">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bytes" /> is null.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:Nmqtt.Encoding.MqttEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.
            </summary>
            <param name="chars">
            The <see cref="T:System.String" /> containing the set of characters to encode.
            </param>
            <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="chars" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting number of bytes is greater than the maximum number that can be returned as an integer.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:Nmqtt.Encoding.MqttEncoding.ValidateString(System.String)">
            <summary>
            Validates the string to ensure it doesn't contain any characters invalid within the Mqtt string format.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="T:Nmqtt.MqttConnectAckVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT ConnectAck message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.WriteTo(System.IO.Stream)">
            <summary>
            Writes the variable header for an MQTT Connect message to the supplied stream.
            </summary>
            <param name="variableHeaderStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a variable header from the specified header stream.
            </summary>
            <param name="variableHeaderStream">The header stream.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.GetWriteLength">
            <summary>
            Gets the length of the write data when WriteTo will be called.
            </summary>
            <returns>
            The length of data witten by the call to GetWriteLength
            </returns>
            <remarks>
            This method is overriden by the ConnectAckVariableHeader because the variable header of this
            message type, for some reason, contains an extra byte that is not present in the variable
            header spec, meaning we have to do some custom serialization and deserialization.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttConnectAckVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttConnectMessage">
            <summary>
            Implementation of an Mqtt Connect Message. Used to initiate a connection to an RSMB
            </summary>
            <summary>
            An Mqtt message that is used to initiate a connection to a message broker.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithProtocolName(System.String)">
            <summary>
            Sets the name of the protocol to use.
            </summary>
            <param name="protocolName">Name of the protocol.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithProtocolVersion(System.Byte)">
            <summary>
            Sets the protocol version. (Defaults to v3, the only protcol version supported)
            </summary>
            <param name="protocolVersion">The protocol version.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.StartClean">
            <summary>
            Sets the startClean flag so that the broker drops any messages that were previously destined for us.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.Will">
            <summary>
            Sets the Will flag of the variable header
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithWillQos(Nmqtt.MqttQos)">
            <summary>
            Sets the WillQos of the connect flag.
            </summary>
            <param name="qos">The qos.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithWillRetain">
            <summary>
            Sets the WillRetain flag of the Connection Flags
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithClientIdentifier(System.String)">
            <summary>
            Sets the client identifier of the message.
            </summary>
            <param name="clientIdentifier">The client ID.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithWillMessage(System.String)">
            <summary>
            Sets the will message.
            </summary>
            <param name="willMessage">The will message.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WithWillTopic(System.String)">
            <summary>
            Sets the Will Topic
            </summary>
            <param name="willTopic">The Will Topic.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.AuthenticateAs(System.String,System.String)">
            <summary>
            Sets the authentication
            </summary>
            <param name="username">Username to authenticate as</param>
            <param name="password">Password to authenticate with</param>
            <returns>
            </returns>
        </member>
        <member name="P:Nmqtt.MqttConnectMessage.VariableHeader">
            <summary>
            Gets or sets the variable header contents. Contains extended metadata about the message
            </summary>
            <value>The variable header.</value>
        </member>
        <member name="P:Nmqtt.MqttConnectMessage.Payload">
            <summary>
            Gets or sets the payload of the Mqtt Message.
            </summary>
            <value>The payload of the Mqtt Message.</value>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="messageStream">The message stream positioned after the header.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.WriteTo(System.IO.Stream)">
            <summary>
            ss the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttConnectPayload">
            <summary>
            Class that contains details related to an MQTT Connect messages payload
            </summary>
        </member>
        <member name="P:Nmqtt.MqttConnectPayload.ClientIdentifier">
            <summary>
            The identifier of the client that is/has sent the connet message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectPayload.#ctor(Nmqtt.MqttConnectVariableHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectPayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectPayload.#ctor(Nmqtt.MqttConnectVariableHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectPayload" /> class.
            </summary>
            <param name="variableHeader">The variable header to use for the message.</param>
            <param name="payloadStream">The payload stream.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectPayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the connect message payload to the supplied stream.
            </summary>
            <param name="payloadStream">
            </param>
            <remarks>
            A basic message has no Variable Header.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttConnectPayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnectPayload.ToString">
            <summary>
            Returns a string representation of the payload.
            </summary>
            <returns>A string representation of the payload.</returns>
        </member>
        <member name="T:Nmqtt.MqttPublishReceivedVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Publish Received message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReceivedVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReceivedVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttPublishReceivedVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishReceivedVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReceivedVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishReleaseVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Publish Release message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReleaseVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishReleaseVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttPublishReleaseVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishReleaseVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishReleaseVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishCompleteVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Publish Complete message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishCompleteVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishCompleteVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttPublishCompleteVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishCompleteVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishCompleteVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttUnsubscribePayload">
            <summary>
            Class that contains details related to an MQTT Unsubscribe messages payload
            </summary>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribePayload.Subscriptions">
            <summary>
            The collection of subscriptions, Key is the topic, Value is the qos
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribePayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.#ctor(Nmqtt.MqttHeader,Nmqtt.MqttUnsubscribeVariableHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribePayload" /> class.
            </summary>
            <param name="payloadStream">The payload stream.</param>
            <param name="header">The header to use for the message.</param>
            <param name="variableHeader">The variable header to use for the message.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the payload to the supplied stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.GetWriteLength">
            <summary>
            Gets the length of the payload in bytes when written to a stream.
            </summary>
            <returns>The length of the payload in bytes.</returns>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.AddSubscription(System.String)">
            <summary>
            Adds a new subscription to the collection of subscriptions.
            </summary>
            <param name="topic">The topic to Unsubscribe from.</param>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.ClearSubscriptions">
            <summary>
            Clears the subscriptions.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribePayload.ToString">
            <summary>
            Returns a string representation of the payload.
            </summary>
            <returns>A string representation of the payload.</returns>
        </member>
        <member name="T:Nmqtt.MqttUnsubscribeVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Unsubscribe message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribeVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttUnsubscribeVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the Unsubscribe variabe header (prot name, version, Unsubscribe, keepalive)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeVariableHeader.WriteFlags">
            <summary>
            Returns the write flags for the Unsubscribe variabe header (prot name, version, Unsubscribe, keepalive)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttSubscribePayload">
            <summary>
            Class that contains details related to an MQTT Subscribe messages payload
            </summary>
        </member>
        <member name="P:Nmqtt.MqttSubscribePayload.Subscriptions">
            <summary>
            The collection of subscriptions, Key is the topic, Value is the qos
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribePayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.#ctor(Nmqtt.MqttHeader,Nmqtt.MqttSubscribeVariableHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribePayload" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="variableHeader">The variable header to use for the message.</param>
            <param name="payloadStream">The payload stream.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the payload to the supplied stream.
            </summary>
            <param name="payloadStream">
            </param>
            <remarks>
            A basic message has no Variable Header.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.GetWriteLength">
            <summary>
            Gets the length of the payload in bytes when written to a stream.
            </summary>
            <returns>The length of the payload in bytes.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.AddSubscription(System.String,Nmqtt.MqttQos)">
            <summary>
            Adds a new subscription to the collection of subscriptions.
            </summary>
            <param name="topic">The topic to subscribe to.</param>
            <param name="qos">The qos level to subscribe at.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.ClearSubscriptions">
            <summary>
            Clears the subscriptions.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribePayload.ToString">
            <summary>
            Returns a string representation of the payload.
            </summary>
            <returns>A string representation of the payload.</returns>
        </member>
        <member name="T:Nmqtt.MqttSubscribeVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Subscribe message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttSubscribeVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the Subscribe variabe header
            </summary>
        </member>
        <member name="P:Nmqtt.MqttSubscribeVariableHeader.WriteFlags">
            <summary>
            Returns the write flags for the ListenTo variabe header (prot name, version, ListenTo, keepalive)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttSubscribeAckPayload">
            <summary>
            Class that contains details related to an MQTT SubscribeAck messages payload
            </summary>
        </member>
        <member name="P:Nmqtt.MqttSubscribeAckPayload.QosGrants">
            <summary>
            The collection of subscriptions, Key is the topic, Value is the qos
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckPayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.#ctor(Nmqtt.MqttHeader,Nmqtt.MqttSubscribeAckVariableHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckPayload" /> class.
            </summary>
            <param name="header">The header to use for the message.</param>
            <param name="variableHeader">The variable header to use for the message.</param>
            <param name="payloadStream">The payload stream.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the payload to the supplied stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.GetWriteLength">
            <summary>
            Gets the length of the payload in bytes when written to a stream.
            </summary>
            <returns>The length of the payload in bytes.</returns>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.AddGrant(Nmqtt.MqttQos)">
            <summary>
            Adds a new subscription to the collection of subscriptions.
            </summary>
            <param name="grantedQos">The granted qos.</param>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.ClearGrants">
            <summary>
            Clears the subscriptions.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckPayload.ToString">
            <summary>
            Returns a string representation of the payload.
            </summary>
            <returns>A string representation of the payload.</returns>
        </member>
        <member name="T:Nmqtt.MqttSubscribeAckVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT SubscribeAck message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttSubscribeAckVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttSubscribeAckVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the SubscribeAck variabe header (prot name, version, SubscribeAck, keepalive)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttSubscribeAckVariableHeader.WriteFlags">
            <summary>
            Returns the write flags for the SubscribeAck variabe header (prot name, version, SubscribeAck, keepalive)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttSubscribeAckVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttDisconnectMessage">
            <summary>
            Implementation of an MQTT Disconnect Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttDisconnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttDisconnectMessage.#ctor(Nmqtt.MqttHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The message header.</param>
        </member>
        <member name="M:Nmqtt.MqttDisconnectMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPingRequestMessage">
            <summary>
            Implementation of an MQTT Ping Request Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPingRequestMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPingRequestMessage.#ctor(Nmqtt.MqttHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The message header.</param>
        </member>
        <member name="M:Nmqtt.MqttPingRequestMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPingResponseMessage">
            <summary>
            Implementation of an MQTT Ping Response Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPingResponseMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPublishMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPingResponseMessage.#ctor(Nmqtt.MqttHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectMessage" /> class.
            </summary>
            <param name="header">The ping message's header.</param>
        </member>
        <member name="M:Nmqtt.MqttPingResponseMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishAckVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Publish Acknowledgement message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishAckVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishAckVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttPublishAckVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishAckVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishAckVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttPublishPayload">
            <summary>
            Class that contains details related to an MQTT Connect messages payload
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishPayload.Message">
            <summary>
            The message that forms the payload of the publish message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectPayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.#ctor(Nmqtt.MqttHeader,Nmqtt.MqttPublishVariableHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectPayload" /> class.
            </summary>
            <param name="header">The header of the message being process.</param>
            <param name="variableHeader">The variable header of the message being processed.</param>
            <param name="payloadStream">The payload stream.</param>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">
            </param>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the payload to the supplied stream.
            </summary>
            <param name="payloadStream">
            </param>
            <remarks>
            A basic message has no Variable Header.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.GetWriteLength">
            <summary>
            Gets the length of the payload in bytes when written to a stream.
            </summary>
            <returns>The length of the payload in bytes.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.ToString">
            <summary>
            Returns a string representation of the payload.
            </summary>
            <returns>A string representation of the payload.</returns>
        </member>
        <member name="M:Nmqtt.MqttPublishPayload.BytesToString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts an array of bytes to a byte string.
            </summary>
            <param name="Message">The message.</param>
            <returns>The message as an array of bytes</returns>
        </member>
        <member name="T:Nmqtt.MqttPublishVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Connect message.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttPublishVariableHeader.header">
            <summary>
            Stores the standard header
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishVariableHeader.#ctor(Nmqtt.MqttHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishVariableHeader.#ctor(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
            <param name="header">The messages header.</param>
            <param name="variableHeaderStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttPublishVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttPublishVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPublishVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttUnsubscribeAckVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Publish Acknowledgement message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeAckVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttUnsubscribeAckVariableHeader.WriteFlags">
            <summary>
            Returns the read flags for the publish message (topic, messageid)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttUnsubscribeAckVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttConnectFlags">
            <summary>
            Represents the connect flags part of the MQTT Variable Header
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectFlags" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectFlags" /> class configured as per the supplied stream.
            </summary>
            <param name="connectFlagsStream">The connect flags stream.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.WriteTo(System.IO.Stream)">
            <summary>
            Writes the connect flag byte to the supplied stream.
            </summary>
            <param name="connectFlagsStream">The stream to write to.</param>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.ReadFrom(System.IO.Stream)">
            <summary>
            Reads the connect flags from the underlying stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="P:Nmqtt.MqttConnectFlags.ConnectFlagByte">
            <summary>
            Builds the byte that represents the current connect flags.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.GetWriteLength">
            <summary>
            Gets the length of data written when WriteTo is called.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttConnectFlags.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="F:Nmqtt.Constants.MaxMessageSize">
            <summary>
            The Maximum allowed message size as defined by the MQTT v3 Spec (256MB).
            </summary>
        </member>
        <member name="F:Nmqtt.Constants.MaxClientIdentifierLength">
            <summary>
            The Maximum allowed client identifier length.
            </summary>
        </member>
        <member name="F:Nmqtt.Constants.DefaultMqttPort">
            <summary>
            The default Mqtt port to connect to.
            </summary>
        </member>
        <member name="F:Nmqtt.Constants.RecommendedMaxUsernamePasswordLength">
            <summary>
            The recommended length for usernames and passwords.
            </summary>
        </member>
        <member name="T:Nmqtt.ExtensionMethods.StreamExtensions">
            <summary>
            Provides stream extension methods useful for interacting with streams of MQTT messges.
            </summary>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.StreamExtensions.WriteShort(System.IO.Stream,System.Int16)">
            <summary>
            Writes a short to the underlying stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The value to write to the stream.</param>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.StreamExtensions.ReadShort(System.IO.Stream)">
            <summary>
            Reads a short from the underlying stream.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>A short value.</returns>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.StreamExtensions.ReadMqttString(System.IO.Stream)">
            <summary>
            Reads an MQTT string from the underlying stream.
            </summary>
            <param name="stringStream">The stream to read the string from.</param>
            <returns>The Mqtt String.</returns>
        </member>
        <member name="M:Nmqtt.ExtensionMethods.StreamExtensions.WriteMqttString(System.IO.Stream,System.String)">
            <summary>
            Writes the MQTT string.
            </summary>
            <param name="stringStream">The stream containing the string to write.</param>
            <param name="stringToWrite">The string to write.</param>
        </member>
        <member name="T:Nmqtt.MqttConnectVariableHeader">
            <summary>
            Implementation of the variable header for an MQTT Connect message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnectVariableHeader" /> class.
            </summary>
            <param name="headerStream">A stream containing the header of the message.</param>
        </member>
        <member name="P:Nmqtt.MqttConnectVariableHeader.ReadFlags">
            <summary>
            Returns the read flags for the connect variabe header (prot name, version, connect, keepalive)
            </summary>
        </member>
        <member name="P:Nmqtt.MqttConnectVariableHeader.WriteFlags">
            <summary>
            Returns the write flags for the connect variabe header (prot name, version, connect, keepalive)
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnectVariableHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.InvalidHeaderException">
            <summary>
            Exception thrown when processing a header that is invalid in some way.
            </summary>
        </member>
        <member name="M:Nmqtt.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidHeaderException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nmqtt.InvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidHeaderException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.InvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.InvalidHeaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Nmqtt.InvalidPayloadSizeException">
            <summary>
            Exception that is thrown when the payload of a message is not the correct size.
            </summary>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidPayloadSizeException" /> class.
            </summary>
            <param name="payloadSize">Size of the payload.</param>
            <param name="maxSize">The maximum allowed size of the payload.</param>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.#ctor(System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidPayloadSizeException" /> class.
            </summary>
            <param name="payloadSize">Size of the payload.</param>
            <param name="maxSize">The maximum allowable size of the payload.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidPayloadSizeException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.InvalidPayloadSizeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.ClientIdentifierException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="M:Nmqtt.InvalidPayloadSizeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="F:Nmqtt.MqttConnection.tcpClient">
            <summary>
            The TcpClient that maintains the connection to the MQTT broker.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.sendPadlock">
            <summary>
            Sync lock object to ensure that only a single message is sent through the connection handler at once.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttConnection" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nmqtt.MqttConnection.Connect(System.String,System.Int32)">
            <summary>
            Initiate a new connection to a message broker
            </summary>
            <param name="server">
            </param>
            <param name="port">
            </param>
        </member>
        <member name="M:Nmqtt.MqttConnection.Disconnect">
            <summary>
            Disconnects from the message broker
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnection.Send(System.IO.Stream)">
            <summary>
            Sends the message in the stream to the broker.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Nmqtt.MqttConnection.Send(System.Byte[])">
            <summary>
            Sends the message contained in the byte array to the broker.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Nmqtt.MqttConnection.ReadHeaderComplete(System.IAsyncResult)">
            <summary>
            Callback for when data has been read from the underlying network stream.
            </summary>
            <param name="asyncResult">The async result from the read.</param>
        </member>
        <member name="M:Nmqtt.MqttConnection.FireDataAvailableEvent(System.Collections.Generic.List{System.Byte})">
            <summary>
            Raises the DataAvailable event, passing the raw message bytes to all subscribers.
            </summary>
            <param name="messageBytes">The raw content of the message received.</param>
        </member>
        <member name="E:Nmqtt.MqttConnection.DataAvailable">
            <summary>
            Occurs when Data is available for processing from the underlying network stream.
            </summary>
        </member>
        <member name="E:Nmqtt.MqttConnection.ConnectionDropped">
            <summary>
            Occurs when the connection to the remote server drops unexpectedly.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttConnection.ConnectionReadState">
            <summary>
            Controls the read state used during async reads.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ConnectionReadState.Header">
            <summary>
            Reading a message header.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ConnectionReadState.Content">
            <summary>
            Reading message content.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttConnection.ReadWrapper">
            <summary>
            State and logic used to read from the underlying network stream.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.BufferSize">
            <summary>
            The read buffer size from the network
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.TotalBytes">
            <summary>
            The total bytes expected to be read from from the header of content
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.MessageBytes">
            <summary>
            The bytes associated with the message being read.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.Stream">
            <summary>
            The network stream being read.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.NextReadSize">
            <summary>
            The amount of content to read during the next read.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.Buffer">
            <summary>
            The buffer the last stream read wrote into.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttConnection.ReadWrapper.ReadState">
            <summary>
            What is the connection currently reading.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttConnection.ReadWrapper.IsReadComplete">
            <summary>
            A boolean that indicates whether the message read is complete
            </summary>
        </member>
        <member name="M:Nmqtt.MqttConnection.ReadWrapper.#ctor(System.Net.Sockets.NetworkStream)">
            <summary>
            Creates a new ReadWrapper that wraps the state used to read a message from a stream.
            </summary>
            <param name="stream">The stream being read.</param>
        </member>
        <member name="M:Nmqtt.MqttConnection.ReadWrapper.RecalculateNextReadSize">
            <summary>
            Recalculates the number of best to read given the expected total size and the amount read so far.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttConnectReturnCode">
            <summary>
            Enumeration of allowable connection request return codes.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttHeader">
            <summary>
            Represents the Fixed Header of an MQTT message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttHeader.AsType(Nmqtt.MqttMessageType)">
            <summary>
            Sets the type of the message identified in the header.
            </summary>
            <param name="messageType">The type of message.</param>
            <returns>An instance of the header.</returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.WithQos(Nmqtt.MqttQos)">
            <summary>
            Sets the Qos of the message header.
            </summary>
            <param name="qos">The Qos to ser</param>
            <returns>An instance of the header.</returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.IsDuplicate">
            <summary>
            Sets the IsDuplicate flag of the header.
            </summary>
            <returns>An Instance of the header.</returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.ShouldBeRetained">
            <summary>
            Defines that the message should be retained.
            </summary>
            <returns>An instance of the header,</returns>
        </member>
        <member name="F:Nmqtt.MqttHeader.messageSize">
            <summary>
            Backing storage for the payload size.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttHeader.MessageType">
            <summary>
            Gets or sets the type of the MQTT message.
            </summary>
            <value>The type of the MQTT message.</value>
        </member>
        <member name="P:Nmqtt.MqttHeader.Duplicate">
            <summary>
            Gets or sets a value indicating whether this MQTT Message is duplicate of a previous message.
            </summary>
            <value>
                <c>true</c> if duplicate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nmqtt.MqttHeader.Qos">
            <summary>
            Gets or sets the Quality of Service indicator for the message.
            </summary>
            <value>The qos.</value>
        </member>
        <member name="P:Nmqtt.MqttHeader.Retain">
            <summary>
            Gets or sets a value indicating whether this MQTT message should be retained by the message broker for transmission to new subscribers.
            </summary>
            <value>
                <c>true</c> if message should be retained by the message broker; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nmqtt.MqttHeader.MessageSize">
            <summary>
            Gets or sets the size of the variable header + payload section of the message.
            </summary>
            <value>The size of the variable header + payload.</value>
            <exception cref="T:Nmqtt.InvalidPayloadSizeException">The size of the variable header + payload exceeds the maximum allowed size.</exception>
        </member>
        <member name="M:Nmqtt.MqttHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttHeader" /> class based on data contained within the supplied stream.
            </summary>
            <param name="headerStream">The stream containing the header message.</param>
        </member>
        <member name="M:Nmqtt.MqttHeader.WriteTo(System.Int32,System.IO.Stream)">
            <summary>
            Writes the header to a supplied stream.
            </summary>
            <param name="messageSize">The size of the message to write.</param>
            <param name="messageStream">The stream to write the header bytes to.</param>
        </member>
        <member name="M:Nmqtt.MqttHeader.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a new MqttHeader based on a list of bytes.
            </summary>
            <param name="headerStream">The stream that contains the message, positioned at the beginning of the header.</param>
            <returns>
            </returns>
        </member>
        <member name="P:Nmqtt.MqttHeader.HeaderBytes">
            <summary>
            Gets the value of the Mqtt header as a byte array
            </summary>
        </member>
        <member name="M:Nmqtt.MqttHeader.CalculateLength(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Calculates the remaining length of an mqttmessage from the bytes that make up the length
            </summary>
            <param name="lengthBytes">The length bytes.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.ReadLengthBytes(System.IO.Stream)">
            <summary>
            Reads the length bytes of an MqttHeader from the supplied stream.
            </summary>
            <param name="headerStream">The header stream.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.GetRemainingLengthBytes">
            <summary>
            Calculates and return the bytes that represent the remaining length of the message.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttMessageFactory">
            <summary>
            Factory for generating instances of MQTT Messages
            </summary>
        </member>
        <member name="M:Nmqtt.MqttMessageFactory.GetMessage(Nmqtt.MqttHeader,System.IO.Stream)">
            <summary>
            Gets an instance of an MqttMessage based on the message type requested.
            </summary>
            <param name="header">The message header.</param>
            <param name="messageStream">The content of the message, including variable header where applicable.</param>
            <returns>An instance of the desired message type.</returns>
        </member>
        <member name="T:Nmqtt.MqttMessageType">
            <summary>
            An enumeration of all available MQTT Message Types
            </summary>
        </member>
        <member name="F:Nmqtt.MqttMessageType.Reserved1">
            <summary>
            Reserved by the MQTT spec, should not be used.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttMessageType.Reserved2">
            <summary>
            Reserved by the MQTT spec, should not be used.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttPayload">
            <summary>
            Represents the payload (Body) of an MQTT Message.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPayload" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttPayload.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttPayload" /> class.
            </summary>
            <param name="payloadStream">The payload stream.</param>
        </member>
        <member name="M:Nmqtt.MqttPayload.WriteTo(System.IO.Stream)">
            <summary>
            Writes the payload to the supplied stream.
            </summary>
            <param name="payloadStream">The stream to write the variable header to.</param>
            <remarks>
            A basic message has no Variable Header.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttPayload.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a payload from the specified header stream.
            </summary>
            <param name="payloadStream">The stream to read the payload from.</param>
        </member>
        <member name="M:Nmqtt.MqttPayload.GetWriteLength">
            <summary>
            Gets the length of the payload in bytes when written to a stream.
            </summary>
            <returns>The length of the payload in bytes.</returns>
        </member>
        <member name="T:Nmqtt.MqttClient">
            <summary>
            A client class for interacting with MQTT Data Packets
            </summary>
        </member>
        <member name="F:Nmqtt.MqttClient.connectionHandler">
            <summary>
            The Handler that is managing the connection to the remote server.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttClient.subscriptionsManager">
            <summary>
            The subscriptions manager responsible for tracking subscriptions.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttClient.keepAlive">
            <summary>
            Handles the connection management while idle.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttClient.publishingManager">
            <summary>
            Handles everything to do with publication management.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttClient.messageLogger">
            <summary>
            Handles the logging of received messages for diagnostic purpose.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttClient.Server">
            <summary>
            The remote server that this client will connect to.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttClient.Port">
            <summary>
            The port on the remote server that this client will connect to.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttClient.ClientIdentifier">
            <summary>
            Gets the Client Identifier of this instance of the MqttClient
            </summary>
        </member>
        <member name="P:Nmqtt.MqttClient.ConnectionState">
            <summary>
            Gets the current conneciton state of the Mqtt Client.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttClient" /> class using the default Mqtt Port.
            </summary>
            <param name="server">The server hostname to connect to.</param>
            <param name="clientIdentifier">The client identifier to use to connect with.</param>
        </member>
        <member name="M:Nmqtt.MqttClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttClient" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
            <param name="clientIdentifier">The ID that the broker can use to identify the client.</param>
        </member>
        <member name="M:Nmqtt.MqttClient.Connect(System.String,System.String)">
            <summary>
            Performs a synchronous connect to the message broker with an optional username and password
            for the purposes of authentication.
            </summary>
            <param name="username">Optionally the username to authenticate as.</param>
            <param name="password">Optionally the password to authenticate with.</param>
        </member>
        <member name="M:Nmqtt.MqttClient.GetConnectMessage(System.String,System.String)">
            <summary>
            Gets a configured connect message.
            </summary>
            <returns>An MqttConnectMessage that can be used to connect to a message broker.</returns>
        </member>
        <member name="M:Nmqtt.MqttClient.ListenTo(System.String,Nmqtt.MqttQos)">
            <summary>
            Subscribles the specified topic with a callback function that accepts the raw message data.
            </summary>
            <param name="topic">The topic.</param>
            <param name="qosLevel">The qos level.</param>
            <returns>
            </returns>
            <exception cref="T:Nmqtt.InvalidTopicException">If a topic that does not meet the MQTT topic spec rules is provided.</exception>
        </member>
        <member name="M:Nmqtt.MqttClient.ListenTo``2(System.String,Nmqtt.MqttQos)">
            <summary>
            Initiates a topic subscription request to the connected broker with a strongly typed data processor callback.
            </summary>
            <param name="topic">The topic to subscribe to.</param>
            <param name="qosLevel">The qos level the message was published at.</param>
            <returns>
            The identifier assigned to the subscription.
            </returns>
            <exception cref="T:Nmqtt.InvalidTopicException">If a topic that does not meet the MQTT topic spec rules is provided.</exception>
        </member>
        <member name="M:Nmqtt.MqttClient.PublishMessage(System.String,System.Byte[])">
            <summary>
            Publishes a message to the message broker.
            </summary>
            <param name="topic">The topic to publish the message to.</param>
            <param name="data">The message to publish.</param>
            <returns>The message identiier assigned to the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttClient.PublishMessage(System.String,Nmqtt.MqttQos,System.Byte[])">
            <summary>
            Publishes a message to the message broker.
            </summary>
            <param name="topic">The topic to publish the message to.</param>
            <param name="qos">The QOS level to publish the message at.</param>
            <param name="data">The message to publish.</param>
            <returns>The message identiier assigned to the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttClient.PublishMessage``2(System.String,``0)">
            <summary>
            Publishes a message to the message broker.
            </summary>
            <typeparam name="TPayloadConverter">The type of the data convert.</typeparam>
            <typeparam name="T">The Type of the data being published</typeparam>
            <param name="topic">The topic to publish the message to.</param>
            <param name="data">The message to publish.</param>
            <returns>
            The message identiier assigned to the message.
            </returns>
        </member>
        <member name="M:Nmqtt.MqttClient.PublishMessage``2(System.String,Nmqtt.MqttQos,``0)">
            <summary>
            Publishes a message to the message broker.
            </summary>
            <typeparam name="TPayloadConverter">The type of the data converter to use.</typeparam>
            <typeparam name="T">The Type of the data being published</typeparam>
            <param name="topic">The topic to publish the message to.</param>
            <param name="qualityOfService">The quality of service to attach to the message.</param>
            <param name="data">The message to publish.</param>
            <returns>
            The message identiier assigned to the message.
            </returns>
            <exception cref="T:Nmqtt.InvalidTopicException">Thrown if the topic supplied violates the MQTT topic format rules.</exception>
        </member>
        <member name="M:Nmqtt.MqttClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttMessage">
            <summary>
            Represents an MQTT message that contains a fixed header, variable header and message body.
            </summary>
            <remarks>
            Messages roughly look as follows.
            <code>
            ----------------------------
            | Header, 2-5 Bytes Length |
            ----------------------------
            | Variable Header          |
            | n Bytes Length           |
            ----------------------------
            | Message Payload          |
            | 256MB minus VH Size      |
            ----------------------------
            </code></remarks>
        </member>
        <member name="P:Nmqtt.MqttMessage.Header">
            <summary>
            The header of the MQTT Message. Contains metadata about the message
            </summary>
        </member>
        <member name="M:Nmqtt.MqttMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttMessage" /> class.
            </summary>
            <remarks>
            Only called via the MqttMessage.Create operation during processing of an Mqtt message stream.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttMessage.#ctor(Nmqtt.MqttHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttMessage" /> class.
            </summary>
            <param name="header">The header of the message.</param>
        </member>
        <member name="M:Nmqtt.MqttMessage.CreateFrom(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new instance of an MQTT Message based on a raw message bytes.
            </summary>
            <param name="messageBytes">The message bytes.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.MqttMessage.CreateFrom(System.IO.Stream)">
            <summary>
            Creates a new instance of an MQTT Message based on a raw message stream.
            </summary>
            <param name="messageStream">The message stream.</param>
            <returns>An MqttMessage containing details of the message.</returns>
        </member>
        <member name="M:Nmqtt.MqttMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the supplied stream.
            </summary>
            <param name="messageStream">The stream to write the message to.</param>
        </member>
        <member name="M:Nmqtt.MqttMessage.ReadFrom(System.IO.Stream)">
            <summary>
            Reads a message from the supplied stream.
            </summary>
            <param name="messageStream">The message stream.</param>
        </member>
        <member name="M:Nmqtt.MqttMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Nmqtt.MqttQos">
            <summary>
            Enumeration of available QoS types.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttQos.AtMostOnce">
            <summary>
            QOS Level 0 - Message is not guaranteed delivery. No retries are made to ensure delivery is successful.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttQos.AtLeastOnce">
            <summary>
            QOS Level 1 - Message is guaranteed delivery. It will be delivered at least one time, but may be delivered
            more than once if network errors occur.
            </summary>
        </member>
        <member name="F:Nmqtt.MqttQos.ExactlyOnce">
            <summary>
            QOS Level 2 - Message will be delivered once, and only once. Message will be retried until
            it is successfully sent..
            </summary>
        </member>
        <member name="F:Nmqtt.MqttQos.Reserved1">
            <summary>
            Reserved by the MQTT Spec. Currently unused.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttVariableHeader">
            <summary>
            Represents the base class for the Variable Header portion of some MQTT Messages.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttVariableHeader.Length">
            <summary>
            The length, in bytes, consumed by the variable header.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttVariableHeader.KeepAlive">
            <summary>
            Defines the maximum allowable lag, in seconds, between expected messages.
            </summary>
            <remarks>
            The spec indicates that clients won't be disconnected until KeepAlive + 1/2 KeepAlive time period
            elapses.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttVariableHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttVariableHeader" /> class.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttVariableHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.MqttVariableHeader" /> class, populating it with data from a stream.
            </summary>
            <param name="headerStream">The stream containing the variable header.</param>
        </member>
        <member name="P:Nmqtt.MqttVariableHeader.ReadFlags">
            <summary>
            Gets the Read Flags used during message deserialization
            </summary>
        </member>
        <member name="P:Nmqtt.MqttVariableHeader.WriteFlags">
            <summary>
            Gets the write flags used during message serialization
            </summary>
        </member>
        <member name="M:Nmqtt.MqttVariableHeader.WriteTo(System.IO.Stream)">
            <summary>
            Writes the variable header to the supplied stream.
            </summary>
            <param name="variableHeaderStream">The stream to write the variable header to.</param>
            <remarks>
            This base implementation uses the WriteFlags property that can be
            overridden in subclasses to determine what to read from the variable header.
            A subclass can override this method to do completely custom read operations
            if required.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttVariableHeader.ReadFrom(System.IO.Stream)">
            <summary>
            Creates a variable header from the specified header stream.
            </summary>
            <param name="variableHeaderStream">The stream to read the variable header from.</param>
            <remarks>
            This base implementation uses the ReadFlags property that can be
            overridden in subclasses to determine what to read from the variable header.
            A subclass can override this method to do completely custom read operations
            if required.
            </remarks>
        </member>
        <member name="M:Nmqtt.MqttVariableHeader.GetWriteLength">
            <summary>
            Gets the length of the write data when WriteTo will be called.
            </summary>
            <returns>The length of data witten by the call to GetWriteLength</returns>
        </member>
        <member name="T:Nmqtt.MqttVariableHeader.ReadWriteFlags">
            <summary>
            Enumeration used by subclasses to tell the variable header what should be read from the underlying stream.
            </summary>
        </member>
        <member name="T:Nmqtt.PublicationTopic">
            <summary>
            Implementation of a Publication topic that performs additional validations
            messages that are published.
            </summary>
        </member>
        <member name="M:Nmqtt.PublicationTopic.ValidateWildcards(Nmqtt.Topic)">
            <summary>
            Validates that the topic has no wildcards which are not allowed in publication topics.
            </summary>
            <param name="topicInstance">The instance to check.</param>
        </member>
        <member name="T:Nmqtt.PublishEventArgs">
            <summary>
            Represents an event argumnts that contains an Mqtt Publish Message.
            </summary>
        </member>
        <member name="P:Nmqtt.PublishEventArgs.PublishMessage">
            <summary>
            The message being published.
            </summary>
        </member>
        <member name="P:Nmqtt.PublishEventArgs.Topic">
            <summary>
            Gets the parsed topic belonging to the published message.
            </summary>
        </member>
        <member name="M:Nmqtt.PublishEventArgs.#ctor(Nmqtt.PublicationTopic,Nmqtt.MqttPublishMessage)">
            <summary>
            Creates a new instance of a PublishEventArgs class.
            </summary>
            <param name="topic">The parsed topic.</param>
            <param name="publishMessage">The MQTT Publish Message that's been published.</param>
        </member>
        <member name="T:Nmqtt.PublishingManager">
            <summary>
            Handles the logic and workflow surrounding the message publishing and receipt process
            </summary>
            <remarks>
                <para>
            It's probably worth going into a bit of the detail around publishing and Quality of Service levels
            as they are primarily the reason why message publishing has been split out into this class.
            </para>
                <para>
            There are
            3 different QOS levels. AtMostOnce (0), means that the message, when sent from broker to client, or
            client to broker, should be delivered at most one time, and it does not matter if the message is
            "lost". QOS 2, AtLeastOnce, means that the message should be successfully received by the receiving
            party at least one time, so requires some sort of acknowledgement so the sender can re-send if the
            receiver does not acknowledge.
            </para>
                <para>
            QOS 3 is a bit more complicated as it provides the facility for guaranteed delivery of the message
            exactly one time, no more, no less.
            </para>
                <para>Each of these have different message flow between the sender and receiver.</para>
                <para>
                    <b>QOS 0 - AtMostOnce</b>
                    <code>
            Sender --&gt; Publish --&gt; Receiver
            </code>
                </para>
                <para>
                    <b>QOS 1 - AtLeastOnce</b>
                    <code>
            Sender --&gt; Publish --&gt; Receiver --&gt; PublishAck --&gt; Sender
            |
            v
            Message Processor
            </code>
                </para>
                <para>
                    <b>QOS 2 - AtLeastOnce</b>
                    <code>
            Sender --&gt; Publish --&gt; Receiver --&gt; PublishReceived --&gt; Sender --&gt; PublishRelease --&gt; Reciever --&gt; PublishComplete --&gt; Sender
            |
            v
            Message Processor
            </code>
                </para>
            </remarks>
        </member>
        <member name="F:Nmqtt.PublishingManager.messageIdentifierDispenser">
            <summary>
            Handles dispensing of message ids for messages published to a topic.
            </summary>
        </member>
        <member name="F:Nmqtt.PublishingManager.publishedMessages">
            <summary>
            Stores messages that have been pubished but not yet acknowledged.
            </summary>
        </member>
        <member name="F:Nmqtt.PublishingManager.receivedMessages">
            <summary>
            Stores messages that have been received from a broker with qos level 2 (Exactly Once).
            </summary>
        </member>
        <member name="F:Nmqtt.PublishingManager.dataConverters">
            <summary>
            Stores a cache of data converters used when publishing data to a broker.
            </summary>
        </member>
        <member name="F:Nmqtt.PublishingManager.connectionHandler">
            <summary>
            The current connection handler.
            </summary>
        </member>
        <member name="E:Nmqtt.PublishingManager.MessageReceived">
            <summary>
            Raised when a message has been recieved by the client and the relevant QOS handshake is complete.
            </summary>
        </member>
        <member name="M:Nmqtt.PublishingManager.#ctor(Nmqtt.IMqttConnectionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Nmqtt.PublishingManager" /> class.
            </summary>
            <param name="connectionHandler">The connection handler.</param>
        </member>
        <member name="M:Nmqtt.PublishingManager.Publish``2(Nmqtt.PublicationTopic,Nmqtt.MqttQos,``0)">
            <summary>
            Publish a message to the broker on the specified topic.
            </summary>
            <param name="topic">The topic to send the message to.</param>
            <param name="qualityOfService">The QOS to use when publishing the message.</param>
            <param name="data">The message to send.</param>
            <returns>The message identifier assigned to the message.</returns>
        </member>
        <member name="M:Nmqtt.PublishingManager.GetPayloadConverter``1">
            <summary>
            Gets an instance of the specified publish data converter.
            </summary>
            <typeparam name="TPayloadConverter">The type of the data converter.</typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.PublishingManager.HandlePublishAcknowledgement(Nmqtt.MqttMessage)">
            <summary>
            Handles the receipt of publish acknowledgement messages.
            </summary>
            <param name="msg">The publish acknowledgement</param>
            <returns>True; always.</returns>
            <remarks>
            This callback simply removes it from the list of published messages.
            </remarks>
        </member>
        <member name="M:Nmqtt.PublishingManager.HandlePublish(Nmqtt.MqttMessage)">
            <summary>
            Handles the receipt of publish messages from a message broker.
            </summary>
            <param name="msg">The message that was published.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Nmqtt.PublishingManager.HandlePublishRelease(Nmqtt.MqttMessage)">
            <summary>
            Handles the publish complete, for messages that are undergoing Qos ExactlyOnce processing.
            </summary>
            <param name="msg">The MSG.</param>
            <returns>Boolean value indicating whether the message was successfull processed.</returns>
        </member>
        <member name="M:Nmqtt.PublishingManager.OnMessageReceived(Nmqtt.PublicationTopic,Nmqtt.MqttPublishMessage)">
            <summary>
            Raises the MessageReceived event.
            </summary>
            <param name="topic">The topic the message belongs to.</param>
            <param name="msg">The message received.</param>
        </member>
        <member name="M:Nmqtt.PublishingManager.HandlePublishComplete(Nmqtt.MqttMessage)">
            <summary>
            Handles a publish complete message received from a broker.
            </summary>
            <param name="msg">
            </param>
            <returns>true if the message flow completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Nmqtt.PublishingManager.HandlePublishReceived(Nmqtt.MqttMessage)">
            <summary>
            Handles publish received messages during processing of QOS level 2 (Exactly once) messages.
            </summary>
            <param name="msg">The publish received message</param>
            <returns>true or false, depending on the success of message processing.</returns>
        </member>
        <member name="T:Nmqtt.AsciiPayloadConverter">
            <summary>
            Converts string data to and from the MQTT wire format
            </summary>
        </member>
        <member name="M:Nmqtt.AsciiPayloadConverter.ConvertFromBytes(System.Byte[])">
            <summary>
            Processes received data and returns it as a string.
            </summary>
            <param name="messageData">The received data as an array of bytes.</param>
            <returns>
            The data processed and turned into the specified type.
            </returns>
        </member>
        <member name="M:Nmqtt.AsciiPayloadConverter.ConvertToBytes(System.String)">
            <summary>
            Converts sent data from a string to a byte array.
            </summary>
            <param name="data">The string to convert to the byte array.</param>
            <returns>A byte array representation of the string.</returns>
        </member>
        <member name="T:Nmqtt.PassThroughPayloadConverter">
            <summary>
            Acts as a passthrough for the raw data without doing any conversion.
            </summary>
            s</member>
        <member name="M:Nmqtt.PassThroughPayloadConverter.ConvertFromBytes(System.Byte[])">
            <summary>
            Processes received data and returns it as a byte array.
            </summary>
            <param name="messageData">The received data as an array of bytes.</param>
            <returns>
            The data processed and turned into a byte array.
            </returns>
        </member>
        <member name="M:Nmqtt.PassThroughPayloadConverter.ConvertToBytes(System.Byte[])">
            <summary>
            Converts sent data from an object graph to a byte array.
            </summary>
            <param name="data">The data to convert to the byte array.</param>
            <returns>A byte array representation of the data.</returns>
        </member>
        <member name="T:Nmqtt.Subscription">
            <summary>
            Entity that captures data related to an individual subscription
            </summary>
        </member>
        <member name="P:Nmqtt.Subscription.MessageIdentifier">
            <summary>
            The message identifier assigned to the subscription
            </summary>
        </member>
        <member name="P:Nmqtt.Subscription.CreatedTime">
            <summary>
            The time the subscription was created.
            </summary>
        </member>
        <member name="P:Nmqtt.Subscription.Topic">
            <summary>
            The Topic that is subscribed to.
            </summary>
        </member>
        <member name="P:Nmqtt.Subscription.Qos">
            <summary>
            The QOS level of the topics subscription
            </summary>
        </member>
        <member name="P:Nmqtt.Subscription.Observable">
            <summary>
            The observable that receives messages from the broker.
            </summary>
        </member>
        <member name="T:Nmqtt.SubscriptionsManager">
            <summary>
            A class that can manage the topic subscription process.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.subscriptionPadlock">
            <summary>
            used to synchronize access to subscriptions.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.messageIdentifierDispenser">
            <summary>
            Dispenser used for keeping track of subscription ids
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.subscriptions">
            <summary>
            List of confirmed subscriptions, keyed on the topic name.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.pendingSubscriptions">
            <summary>
            A list of subscriptions that are pending acknowledgement, keyed on the message identifier.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.connectionHandler">
            <summary>
            The connection handler that we use to subscribe to subscription acknowledgements.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionsManager.publishingManager">
            <summary>
            Publishing manager used for passing on published messages to subscribers.
            </summary>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.#ctor(Nmqtt.IMqttConnectionHandler,Nmqtt.IPublishingManager)">
            <summary>
            Creates a new instance of a SubscriptionsManager that uses the specified connection to manage subscriptions.
            </summary>
            <param name="connectionHandler">The connection handler that will be used to subscribe to topics.</param>
            <param name="publishingManager">The punlishing manager that handles the receipt of messages from the broker.</param>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.RegisterSubscription``2(System.String,Nmqtt.MqttQos)">
            <summary>
            Registers a new subscription with the subscription manager.
            </summary>
            <param name="topic">
            </param>
            <param name="qos">
            </param>
            <returns>An IObservable that yields any messages received once subscribed.</returns>
            <exception cref="T:Nmqtt.InvalidTopicException">If a topic that does not meet the MQTT topic spec rules is provided.</exception>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.TryGetExistingSubscription``2(System.String,System.IObservable{Nmqtt.MqttReceivedMessage{``0}}@)">
            <summary>
            Gets a view on the existing observable, if the subscription already exists.
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TPayloadConverter">
            </typeparam>
            <param name="topic">The subscription Topic to get.</param>
            <param name="observable">Set to an observable on the subscription if one exists, otherwise null.</param>
            <returns>True if an existing observable is available, otherwise false.</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.CreateNewSubscription``2(System.String,Nmqtt.MqttQos)">
            <summary>
            Creates a new subscription for the specified topic.
            </summary>
            <typeparam name="T">The type of data the subscription is expected to return.</typeparam>
            <typeparam name="TPayloadConverter">The type of the converter that can convert from bytes to the type T.</typeparam>
            <param name="topic">The topic to subscribe to.</param>
            <param name="qos">The QOS level to subscribe at.</param>
            <returns>An observable that yields messages when they arrive.</returns>
            <exception cref="T:Nmqtt.InvalidTopicException">If a topic that does not meet the MQTT topic spec rules is provided.</exception>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.CreateObservableForSubscription(Nmqtt.SubscriptionTopic,System.Int16)">
            <summary>
            Creates an observable for a subscription.
            </summary>
            <param name="subscriptionTopic">The topic to the obserbable should read messages on.</param>
            <param name="msgId">The messgeid assigned to the subscription.</param>
            <returns>An observable that yields a byte array for each message that arrives on a topoc.</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.WrapSubscriptionObservable``2(System.IObservable{Nmqtt.MqttReceivedMessage{System.Byte[]}})">
            <summary>
            Wraps a raw byte array observable with the payload converter and yields a serialized messages in place.
            </summary>
            <typeparam name="T">The type of data the subscription is expected to return.</typeparam>
            <typeparam name="TPayloadConverter">The type of the converter that can convert from bytes to the type T.</typeparam>
            <param name="observable">The observable on the raw byte array to be wrapped.</param>
            <returns>An observable that yields MqttReceivedMessages of type T when a message arrives on the subscription.</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.ConfirmSubscription(Nmqtt.MqttMessage)">
            <summary>
            Confirms a subscription has been made with the broker. Marks the sub as confirmed in the subs storage.
            </summary>
            <param name="msg">The message that triggered subscription confirmation.</param>
            <returns>True, always.</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.ConfirmUnsubscribe(Nmqtt.MqttMessage)">
            <summary>
            Cleans up after an unsubscribe message is received from the broker.
            </summary>
            <param name="msg">The unsubscribe message from the broker.</param>
            <returns>True, always.</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.GetSubscriptionsStatus(System.String)">
            <summary>
            Gets the current status of a subscription.
            </summary>
            <param name="topic">The topoc to check the subscription for.</param>
            <returns>The current status of the subscription</returns>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.GetSubscription(System.String)">
            <summary>
            Gets the subscription data method registered for a subscription topoc.
            </summary>
            <param name="topic">The topoc to retrieve the subscription data for.</param>
            <returns>The subscription data for a subscription, or null if there is no registered subscription.</returns>
            <remarks>
            This will ignore pending subscriptions, so any messages that arrive for pending subscriptions will NOT be delivered. This
            policy may change in the future if I find that some brokers might be a bit shifty. Sending messages to callbacks that
            are not yet confirmed might not be handled gracefully by client consumers.
            </remarks>
        </member>
        <member name="M:Nmqtt.SubscriptionsManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nmqtt.SubscriptionStatus">
            <summary>
            Describes the status of a subscription
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionStatus.DoesNotExist">
            <summary>
            The subscription does not exist / is not known
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionStatus.Pending">
            <summary>
            The subscription is currently pending acknowledgement by a broker.
            </summary>
        </member>
        <member name="F:Nmqtt.SubscriptionStatus.Active">
            <summary>
            The subscription is currently active and messages will be received.
            </summary>
        </member>
        <member name="T:Nmqtt.MqttMessageEventArgs">
            <summary>
            Describes the event arguments that represent an available MqttMessage.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttMessageEventArgs.Topic">
            <summary>
            Gets or sets the topic the message was published to.
            </summary>
        </member>
        <member name="P:Nmqtt.MqttMessageEventArgs.Message">
            <summary>
            Gets or sets the nessage that was published.
            </summary>
        </member>
        <member name="M:Nmqtt.MqttMessageEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the MqttMessageEventArgs class.
            </summary>
            <param name="topic">
            A <see cref="T:System.String" /> that represents the topic the message was published to.
            </param>
            <param name="message">
            A <see cref="T:Nmqtt.MqttMessage" /> that represents the message that was published.
            </param>
        </member>
        <member name="T:Nmqtt.Topic">
            <summary>
            Provides the base implementation of an MQTT topic.
            </summary>
            <remarks>
            An MQTT
            </remarks>
        </member>
        <member name="P:Nmqtt.Topic.HasWildcards">
            <summary>
            Returns True if there are any wildcards in the specified rawTopic, otherwise false.
            </summary>
        </member>
        <member name="M:Nmqtt.Topic.#ctor(System.String,System.Action{Nmqtt.Topic}[])">
            <summary>
            Creates a new instance of a rawTopic from a rawTopic string.
            </summary>
            <param name="rawTopic">The topic to represent.</param>
            <param name="validations">The validations to run on the rawTopic.</param>
        </member>
        <member name="M:Nmqtt.Topic.ValidateMaxLength(Nmqtt.Topic)">
            <summary>
            Validates that the topic does not exceed the maximum length.
            </summary>
            <param name="topicInstance">The instance to check.</param>
        </member>
        <member name="M:Nmqtt.Topic.ValidateMinLength(Nmqtt.Topic)">
            <summary>
            Validates that the topic does not fall below the minimum length.
            </summary>
            <param name="topicInstance">The instance to check.</param>
        </member>
        <member name="M:Nmqtt.Topic.GetHashCode">
            <summary>
            Serves as a hash function for a topics.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Nmqtt.Topic" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nmqtt.Topic.Equals(System.Object)">
            <summary>
            Checks if one topic equals another topic exactly.
            </summary>
            <param name="obj">The topic to compare equality to.</param>
        </member>
        <member name="M:Nmqtt.Topic.ToString">
            <summary>
            Returns a String representation of the topic.
            </summary>
            <returns>A string representation of the topic.</returns>
        </member>
    </members>
</doc>
